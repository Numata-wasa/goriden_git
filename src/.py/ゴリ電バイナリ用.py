# -*- coding: utf-8 -*-
"""ゴリ電バイナリ用.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EasJ296KZlVRQVeEiUgf7wOsMAYzOqNr
"""

import struct
import csv

# ESP32の「struct LogEntry」と全く同じ構造をPythonで定義
# ==========================================================
# < は リトルエンディアン (ESP32と同じ)
# I = uint32_t (4 bytes)
# f = float (4 bytes)
# h = int16_t (2 bytes)
# i = int32_t (4 bytes)
# B = uint8_t (1 byte)
# H = uint16_t (2 bytes)
LOG_FORMAT = '<I ffff fff fff hhh iifB HBB BBB B'
LOG_SIZE = struct.calcsize(LOG_FORMAT)

# CSVのヘッダー
CSV_HEADER = [
    'timestamp_ms',
    'temp', 'pres', 'alt', 'hum',
    'ax', 'ay', 'az',
    'gx', 'gy', 'gz',
    'cx', 'cy', 'cz',
    'lat_deg', 'lng_deg', 'gps_alt_m', 'sats',
    'year', 'month', 'day',
    'hour', 'min', 'sec', 'cs'
]

IN_FILE = 'fulldata.bin'
OUT_FILE = 'converted_log.csv'

def convert_to_csv(bin_file, csv_file):
    print(f"Struct size: {LOG_SIZE} bytes")
    print(f"Opening binary file: {bin_file}")

    try:
        with open(bin_file, 'rb') as f_in, open(csv_file, 'w', newline='') as f_out:

            writer = csv.writer(f_out)
            writer.writerow(CSV_HEADER)

            count = 0
            while True:
                # 1エントリ分 (LOG_SIZE) のバイナリデータを読み込む
                chunk = f_in.read(LOG_SIZE)
                if not chunk or len(chunk) < LOG_SIZE:
                    break # ファイルの終わり

                # データをPythonのタプルにアンパック（展開）
                try:
                    data = struct.unpack(LOG_FORMAT, chunk)
                except struct.error as e:
                    print(f"Unpack error at entry {count}: {e}. File might be corrupt.")
                    break

                # GPSの緯度経度を float に戻す (1e6 で割る)
                # data[14] = lat, data[15] = lng
                csv_row = list(data)
                csv_row[14] = data[14] / 1e6 # lat
                csv_row[15] = data[15] / 1e6 # lng

                writer.writerow(csv_row)
                count += 1

            print(f"Successfully converted {count} log entries.")
            print(f"Output saved to: {OUT_FILE}")

    except FileNotFoundError:
        print(f"Error: Input file '{bin_file}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    convert_to_csv(IN_FILE, OUT_FILE)